#include <stdio.h>
#include <stdlib.h>
#include <string.h>


struct TrieNode
{
    int count;
    struct TrieNode* children[26];
};


struct TrieNode* createTrieNode()
{
    struct TrieNode* newNode = (struct TrieNode*)malloc(sizeof(struct TrieNode));
    newNode->count = 0;
    for (int i = 0; i < 26; ++i)
        newNode->children[i] = NULL;
    return newNode;
}


void insert(struct TrieNode* root, char* word)
{
    struct TrieNode* curr = root;
    for (int i = 0; word[i] != '\0'; ++i)
    {
        int index = word[i] - 'a';
        if (curr->children[index] == NULL)
            curr->children[index] = createTrieNode();
        curr = curr->children[index];
    }
    curr->count++;
}


int numberOfOccurrences(struct TrieNode* root, char* word)
{
    struct TrieNode* curr = root;
    for (int i = 0; word[i] != '\0'; ++i)
    {
        int index = word[i] - 'a';
        if (curr->children[index] == NULL)
            return 0;
        curr = curr->children[index];
    }
    return curr->count;
}

void deallocateTrie(struct TrieNode* root)
{
    if (root == NULL)
        return;
    for (int i = 0; i < 26; ++i)
    {
        if (root->children[i] != NULL)
            deallocateTrie(root->children[i]);
    }
    free(root);
}


struct TrieNode* createTrie()
{
    return createTrieNode();
}


int readDictionary(char* filename, char** pInWords)
{
  
    
    pInWords[0] = "12";
    pInWords[1] = "not";
    pInWords[2] = "note";
    pInWords[3] = "ucf";
    pInWords[4] = "notaword";
    pInWords[5] = "notawordeither";
    pInWords[5] = "notaword";


    return 5;
}


int main(void)
{
	char *inWords[256];
	
	//read the number of the words in the dictionary
	int numWords = readDictionary("dictionary.txt", inWords);
	for (int i=0;i<numWords;++i)
	{
		printf("%s\n",inWords[i]);
	}
	
	struct Trie *pTrie = createTrie();
	for (int i=0;i<numWords;i++)
	{
		insert(pTrie, inWords[i]);
	}
	// parse lineby line, and insert each word to the trie data structure
	char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
	for (int i=0;i<5;i++)
	{
		printf("\t%s : %d\n", pWords[i], numberOfOccurances(pTrie, pWords[i]));
	}
	pTrie = deallocateTrie(pTrie);
	if (pTrie != NULL)
		printf("There is an error in this program\n");
	return 0;
}
